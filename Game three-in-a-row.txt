#ifndef _GAME_H__
#define _GAME_H__

#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include <stdlib.h>
#include <windows.h>
#include <time.h>

#define  ROW 3
#define  COL 3

void InitBoard(char board[ROW][COL], int row, int col);
void DisplayBoard(char board[ROW][COL], int row, int col);
void ComeputerMove(char board[ROW][COL], int row, int col);
void PlayerMove(char board[ROW][COL], int row, int col);
char IsWin(char board[ROW][COL], int row, int col);
#endif


#define _CRT_SECURE_NO_WARNINGS 1

#include <stdio.h>

void InitBoard(char board[ROW][COL], int row, int col)
{
    int i = 0;
    int j = 0;
    memset(board,' ', row*col*sizeof(board[0][0]));
}
void DisplayBoard(char board[ROW][COL], int row, int col)
{
    int i = 0;
    int j = 0;

    for (i = 0; i < row; i++)
    {
        for (j = 0; j < col; j++)
        {
            printf(" %c ", board[i][j]);
            if (j < col - 1)
                printf("|");

        }
        printf("\n");
        if (i < row - 1)
        {
            for (j = 0; j < col; j++)
            {
                printf("---");
                if (j<col - 1)
                    printf("|");
            }
        }
        printf("\n");
    }

}
void ComeputerMove(char board[ROW][COL], int row, int col)
{
    int x = 0;
    int y = 0;
    printf("电脑走:>\n");

    while (1)
    {
        x = rand() % row;
        y = rand() % col;
        if (board[x][y] == ' ')
            {
                board[x][y] = '0';
                break;
            }
    }
}
int IsFull(char board[ROW][COL], int row, int col)
{
    int i = 0;
    int j = 0;
    for (i = 0; i < row; i++)
    {
        for (j = 0; j < col; j++)
        {
            if (board[i][j] == ' ')
                return 0;
        }
    }
    return 1;
}
void PlayerMove(char board[ROW][COL], int row, int col)
{
    int x = 0;
    int y = 0;
    printf("玩家走:>\n");
    while (1)
    {
        printf("请输入坐标:>");
        scanf("%d%d", &x, &y);
        if (x > 0 && x<=row && y>0 && y <= col)
        {
            if (board[x-1][y-1] == ' ')
            {
                board[x-1][y-1] = 'x';
                break;
            }
            else
            {
                printf("该坐标已经被占用\n");
            }
        }
        else
        {
            printf("坐标非法\n");
        }
    } 
}
int ComputerHas2(char board[ROW][COL], int row, int col)
{
	int i, j;
	int flag = 0;
	for (i = 0; i < col; i++)
	{
		for (j = 0; j < row; j++)
		{
			if (board[i][j] == '*')
			{
				flag++;
			}
		}
		if (flag == 2)
		{
			flag = 0;
			if (board[i][0] == '0')
			{
				board[i][0] = '*';
				return 1;
			}
			else if (board[i][1] == '0')
			{
				board[i][1] = '*';
				return 1;
			}
			else if (board[i][2] == '0')
			{
				board[i][2] = '*';
				return 1;
			}
		}
		flag = 0;
	}
	flag = 0;
	for (i = 0; i < col; i++)
	{
		for (j = 0; j < row; j++)
		{
			if (board[j][i] == '*')
			{
				flag++;
			}
		}
		if (flag == 2)
		{
			flag = 0;
			if (board[0][i] == '0')
			{
				board[0][i] = '*';
				return 1;
			}
			else if (board[1][i] == '0')
			{
				board[1][i] = '*';
				return 1;
			}
			else if (board[2][i] == '0')
			{
				board[2][i] = '*';
				return 1;
			}
		}
		flag = 0;
	}
	flag = 0;
	for (i = 0; i < row; i++)
	{
		if (board[i][i] == '*')
		{
			flag++;
		}
	}
	if (flag == 2)
	{
		flag = 0;
		if (board[0][0] == '0')
		{
			board[0][0] = '*';
			return 1;
		}
		else if (board[1][1] == '0')
		{
			board[1][1] = '*';
			return 1;
		}
		else if (board[2][2] == '0')
		{
			board[2][2] = '*';
			return 1;
		}
	}
	flag = 0;
	for (i = 0; i < row; i++)
	{
		for (j = 0; j < col; j++)
		{
			if (board[i][j] == '*' && (i + j == 2))
			{

				flag++;
			}
		}
	}
	if (flag == 2)
	{
		flag = 0;
		if (board[0][2] == '0')
		{
			board[0][2] = '*';
			return 1;
		}
		else if (board[1][1] == '0')
		{
			board[1][1] = '*';
			return 1;
		}
		else if (board[2][0] == '0')
		{
			board[2][0] = '*';
			return 1;
		}
	}
	flag = 0;
	return 0;
}


int playerHas2(char board[ROW][COL], int row, int col)
{
	int i, j;
	int flag = 0;
	for (i = 0; i < col; i++)
	{
		for (j = 0; j < row; j++)
		{
			if (board[i][j] == '1')
			{
				flag++;
			}
		}
		if (flag == 2)
		{
			flag = 0;
			if (board[i][0] == '0')
			{
				board[i][0] = '*';
				return 1;
			}
			else if (board[i][1] == '0')
			{
				board[i][1] = '*';
				return 1;
			}
			else if (board[i][2] == '0')
			{
				board[i][2] = '*';
				return 1;
			}
		}
		flag = 0;
	}
	flag = 0;
	for (i = 0; i < col; i++)
	{
		for (j = 0; j < row; j++)
		{
			if (board[j][i] == '1')
			{
				flag++;
			}
		}
		if (flag == 2)
		{
			flag = 0;
			if (board[0][i] == '0')
			{
				board[0][i] = '*';
				return 1;
			}
			else if (board[1][i] == '0')
			{
				board[1][i] = '*';
				return 1;
			}
			else if (board[2][i] == '0')
			{
				board[2][i] = '*';
				return 1;
			}
		}
		flag = 0;
	}

	for (i = 0; i < row; i++)
	{
		if (board[i][i] == '1')
		{
			flag++;
		}
	}
	if (flag == 2)
	{
		flag = 0;
		if (board[0][0] == '0')
		{
			board[0][0] = '*';
			return 1;
		}
		else if (board[1][1] == '0')
		{
			board[1][1] = '*';
			return 1;
		}
		else if (board[2][2] == '0')
		{
			board[2][2] = '*';
			return 1;
		}
	}
	flag = 0;

	for (i = 0; i < row; i++)
	{
		for (j = 0; j < col; j++)
		{
			if (board[i][j] == '1' && i + j == 2)
			{
				flag++;
			}
		}
	}
	if (flag == 2)
	{
		flag = 0;
		if (board[0][2] == '0')
		{
			board[0][2] = '*';
			return 1;
		}
		else if (board[1][1] == '0')
		{
			board[1][1] = '*';
			return 1;
		}
		else if (board[2][0] == '0')
		{
			board[2][0] = '*';
			return 1;
		}
	}
	flag = 0;
	return 0;
}
char IsWin(char board[ROW][COL], int row, int col)
{
    int i = 0;
    int j = 0;

 
        for (i = 0; i < row; i++)
        {
            for (j = 1; j < col - 1; j++)
            {
                if ((board[i][j - 1] == board[i][j]) && (board[i][j] == board[i][j + 1]) && board[i][j] != ' ')
                {
                    return board[i][j];
                }
            }
        }
        for (j = 0; j < col; j++)
        {
            for (i = 1; i < row - 1; i++)
            {
                if ((board[i - 1][j] == board[i + 1][j]) && (board[i][j] == board[i + 1][j]) && board[i][j] != ' ')
                {
                    return board[i][j];
                }
            }

        }
        for (i = 1; i < row - 1; i++)
        {
            for (j = 1; j < col - 1; j++)
            {
                if ((board[i - 1][i - 1] == board[i][i]) && (board[i][i] == board[i + 1][i + 1]) && board[i][j] != ' ')
                {
                    return board[i][j];

                }
            }
        }
        for (i = row - 1; i >0; i--)
        {
            for (j = 1; j < col - 1; j++)
            {
                if ((board[i + 1][j - 1] == board[i][j]) && (board[i][j] == board[i - 1][j + 1]) && board[i][j] != ' ')
                {
                    return board[i][j];
                }
            }
        }
        if (IsFull(board, row, col))
        {
            return 'p';
        }
        return ' ';
    }


	#define _CRT_SECURE_NO_WARNINGS 1

#include <stdio.h>
void game()
{
    char board[ROW][COL] = {0};
    char ret = '0';
    int input = 0;
    printf("1.电脑先走 2.玩家先走\n");
    printf("请选择谁先走:>");
    scanf("%d", &input);
    InitBoard(board, ROW, COL);
    DisplayBoard(board, ROW, COL);
    switch (input)
    { 
        case 1:
                while (1)
                {
                    playerHas2(board, ROW, COL);
					ComputerHas2(board, ROW, COL);
					ComeputerMove(board, ROW, COL);
                    ret = IsWin(board, ROW, COL);
                    if (ret != ' ')
                    {
                        break;
                    }
                    DisplayBoard(board, ROW, COL);
                    PlayerMove(board, ROW, COL);
                    ret = IsWin(board, ROW, COL);
                    if (ret != ' ')
                    {
                        break;
                    }
                    DisplayBoard(board, ROW, COL);
                }

             break;
        case 2:

                while (1)
                {
                    PlayerMove(board, ROW, COL);
                    ret = IsWin(board, ROW, COL);
                    if (ret != ' ')
                    {
                        break;
                    }
                    DisplayBoard(board, ROW, COL);
                    playerHas2(board, ROW, COL);
					ComputerHas2(board, ROW, COL);
					ComeputerMove(board, ROW, COL);
                    ret = IsWin(board, ROW, COL);
                    if (ret != ' ')
                    {
                        break;
                    }
                    DisplayBoard(board, ROW, COL);
                }

            break;
        default:
            break;
    }
    if (ret == ' ')
    {
        printf("平局\n");
        DisplayBoard(board, ROW, COL);
    }
    else if (ret == 'x')
    {
        printf("玩家赢!!!\n");
        DisplayBoard(board, ROW, COL);
    }
    else if (ret == '0')
    {
        printf("电脑赢!!!\n");
        DisplayBoard(board, ROW, COL);
    }
}
void menu()
{
    printf("*******************************\n");
    printf("****1.开始游戏   0.退出游戏****\n");
    printf("*******************************\n");
}
void test()
{
    int input = 0;
    srand((unsigned int)time(NULL));
    do
    {
        menu();
        printf("请选择:>");
        scanf("%d", &input);
        switch (input)
        {  
         case 1:
             game();
             break;
         case 0:
             printf("退出游戏\n");
             break;
         default:
             printf("输入错误\n");
             break;
        } 

    } while(input);
}
int main()
{

    test();
    system("pause");
    return 0;
}
